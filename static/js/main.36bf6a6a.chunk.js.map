{"version":3,"sources":["UserList.js","App.js","serviceWorker.js","index.js"],"names":["ListedSong","props","className","src","item","album","images","url","alt","name","artists","map","artist","join","ListedArtist","OrderedList","items","type","key","UserList","state","token","tracks","user","fetch","method","headers","Accept","Authorization","this","then","response","json","data","setState","Fragment","Component","scopes","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","App","_token","access_token","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36bf6a6a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\n\r\nfunction ListedSong(props) {\r\n  return (\r\n    <li>\r\n      <div className=\"song\">\r\n        <div>\r\n          <img\r\n            src={props.item.album.images[2].url}\r\n            alt=\"cover\"\r\n            className=\"cover\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <h3>{props.item.name}</h3>\r\n          <small>\r\n            {props.item.album.name} -\r\n            {props.item.artists.map(artist => artist.name).join(\", \")}\r\n          </small>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nfunction ListedArtist(props) {\r\n  return (\r\n    <li>\r\n      <div className=\"artist\">\r\n        <img src={props.item.images[2].url} alt=\"artist\" />\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nfunction OrderedList(props) {\r\n  const items = props.items.map(item => {\r\n    if (props.type === \"tracks\") {\r\n      return <ListedSong key={item.name} item={item} />;\r\n    }\r\n    return <ListedArtist key={item.name} item={item} />;\r\n  });\r\n\r\n  return <ol>{items}</ol>;\r\n}\r\n\r\nclass UserList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      token: props.token,\r\n      tracks: [],\r\n      artists: [],\r\n      user: { images: [{}] }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.spotify.com/v1/me/top/tracks?limit=10\", {\r\n      method: \"get\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + this.state.token\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({ tracks: data.items });\r\n      });\r\n\r\n    fetch(\"https://api.spotify.com/v1/me/top/artists?limit=10\", {\r\n      method: \"get\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + this.state.token\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({ artists: data.items });\r\n      });\r\n\r\n    fetch(\"https://api.spotify.com/v1/me\", {\r\n      method: \"get\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + this.state.token\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({ user: data });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"float\">\r\n          <h1>TOP</h1>\r\n        </div>\r\n        <div className=\"column-3 solid\">\r\n          <h2>SONGS</h2>\r\n          <OrderedList items={this.state.tracks} type=\"tracks\" />\r\n        </div>\r\n        <div className=\"column-3 vertical\">\r\n          <h2>ARTISTS</h2>\r\n          <OrderedList items={this.state.artists} type=\"artists\" />\r\n        </div>\r\n        <div className=\"column-3 profile\">\r\n          <img src={this.state.user.images[0].url} alt=\"profile\" />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserList;\r\n","import React, { Component } from \"react\";\r\nimport UserList from \"./UserList\";\r\nimport \"./App.scss\";\r\n\r\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\r\nconst clientId = \"cb1ca7c082da480d81d06ac3ad20b3d5\";\r\nconst redirectUri = \"https://anromen.github.io/spotify-stats\";\r\nconst scopes = [\"user-read-private\", \"user-top-read\"];\r\n\r\nconst hash = window.location.hash\r\n  .substring(1)\r\n  .split(\"&\")\r\n  .reduce(function(initial, item) {\r\n    if (item) {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\n\r\nwindow.location.hash = \"\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      token: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let _token = hash.access_token;\r\n    if (_token) {\r\n      this.setState({\r\n        token: _token\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {!this.state.token && (\r\n          <div className=\"empty\">\r\n            <a\r\n              className=\"login-button\"\r\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\r\n                \"%20\"\r\n              )}&response_type=token&show_dialog=true`}\r\n            >\r\n              <strong>Login to Spotify</strong>\r\n            </a>\r\n          </div>\r\n        )}\r\n        {this.state.token && <UserList token={this.state.token} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}